Main appelle BouclePerdante de taille :  1
Construction de la boucle de taille :  1
1er Post : cp départ :  [p0, p1, p2]  | cp arrivé :  [p00, p01, p02]
Dernier Post : cp départ :  [p00, p01, p02]  | cp arrivé :  [pfinal0, pfinal1, pfinal2]
solv1 :  unsat
Main appelle BouclePerdante de taille :  2
Construction de la boucle de taille :  1
1er Post : cp départ :  [p0, p1, p2]  | cp arrivé :  [p00, p01, p02]
Dernier Post : cp départ :  [p10, p11, p12]  | cp arrivé :  [pfinal0, pfinal1, pfinal2]
Construction de la boucle de taille :  2
1er Post : cp départ :  [p0, p1, p2]  | cp arrivé :  [p00, p01, p02]
Entrée dans la boucle des AsyncPost
Boucle Post :  0  cp départ :  [p00, p01, p02]  | cp arrivé :  [p10, p11, p12]
Dernier Post : cp départ :  [p10, p11, p12]  | cp arrivé :  [pfinal0, pfinal1, pfinal2]
solv1 :  sat
model :
 (define-fun t12 () Int
  1)
(define-fun t01 () Int
  1)
(define-fun pfinal1 () Int
  4)
(define-fun t11 () Int
  1)
(define-fun p11 () Int
  4)
(define-fun pfinal0 () Int
  1)
(define-fun s11 () Int
  (- 1))
(define-fun t02 () Int
  0)
(define-fun p02 () Int
  1)
(define-fun s12 () Int
  (- 1))
(define-fun t00 () Int
  0)
(define-fun s02 () Int
  (- 1))
(define-fun sfinal2 () Int
  (- 1))
(define-fun p01 () Int
  4)
(define-fun s10 () Int
  1)
(define-fun p10 () Int
  3)
(define-fun p1 () Int
  4)
(define-fun p00 () Int
  1)
(define-fun s01 () Int
  0)
(define-fun sfinal0 () Int
  (- 1))
(define-fun pfinal2 () Int
  1)
(define-fun p0 () Int
  1)
(define-fun t10 () Int
  1)
(define-fun p2 () Int
  1)
(define-fun sfinal1 () Int
  (- 1))
(define-fun p12 () Int
  1)
(define-fun s00 () Int
  (- 1))
(define-fun tfinal2 () Int
  0)
(define-fun tfinal1 () Int
  0)
(define-fun tfinal0 () Int
  0)
(define-fun t2 () Int
  0)
(define-fun s2 () Int
  (- 1))
(define-fun t1 () Int
  0)
(define-fun s1 () Int
  (- 1))
(define-fun t0 () Int
  0)
(define-fun s0 () Int
  (- 1))
